{"version":3,"sources":["store/types/types.ts","store/selectors.ts","helpers/api.ts","store/index.ts","helpers/posts.ts","components/PostList/PostList.tsx","helpers/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["ActionType","getPostsSelector","state","posts","getUsersSelector","users","getPostCommentsSelector","postComments","BASE_URL","request","url","options","a","fetch","json","getUsers","setPosts","createAction","SET_POSTS","setUsers","SET_USERS","setPostComments","SET_POST_COMMENTS","reducer","createReducer","builder","addCase","action","payload","store","configureStore","getPosts","response","getPostDetails","postId","deletePost","method","PostsList","userId","onPostIdHandler","selectedPostId","dispatch","useDispatch","useSelector","userPostsByUserId","filter","post","getPostsByUserIdSelector","useEffect","getPostsFromServer","postsFromServer","removePost","className","map","title","type","onClick","id","getPostComments","deleteComment","commentId","addComment","comment","headers","body","JSON","stringify","NewCommentForm","onCommentsHandler","useState","name","setName","email","setEmail","setComment","isError","setIsError","submitHandler","event","preventDefault","newComment","onSubmit","value","onChange","target","placeholder","PostDetails","comments","visibleComments","setVisibleComments","setPost","hasLoadingError","setHasLoadingError","postHandler","postDetails","loadCommentsFromServer","commentsFromServer","deleteHandler","newComments","commentsHandler","classnames","noshow","length","App","selectedUser","setSelectedUser","setSelectedPostId","loadUsersFromServer","usersFromServer","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bfe30f0.chunk.js","sourcesContent":["import { User, Post, Comment } from '../../react-app-env';\n\nexport enum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_POST_COMMENTS = 'SET_POST_COMMENTS',\n}\n\nexport interface SetPostsAction {\n  type: ActionType.SET_POSTS;\n  payload: Post[];\n}\n\nexport interface SetUsersAction {\n  type: ActionType.SET_USERS;\n  payload: User[];\n}\n\nexport interface SetCommentsAction {\n  type: ActionType.SET_POST_COMMENTS;\n  payload: Comment[];\n}\n\nexport type Action = SetPostsAction | SetUsersAction | SetCommentsAction;\n","import { RootState } from '../react-app-env';\n\nexport const getPostsSelector = (state: RootState) => state.posts;\n\nexport const getUsersSelector = (state: RootState) => state.users;\n\nexport const getPostsByUserIdSelector = (userId: number) => {\n  const postsByUserIdSelector = (state: RootState) => {\n    return state.posts.filter(post => post.userId === userId);\n  };\n\n  return postsByUserIdSelector;\n};\n\nexport const getPostCommentsSelector = (state: RootState) => state.postComments;\n","import { Options } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options: Options) => {\n  return (await fetch(url, options)).json();\n};\n\nexport const getUsers = async () => {\n  return (await fetch(`${BASE_URL}/users`)).json();\n};\n","import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\nimport {\n  Comment, Post, RootState, User,\n} from '../react-app-env';\nimport { ActionType } from './types/types';\n\nexport const setPosts = createAction<Post[]>(ActionType.SET_POSTS);\nexport const setUsers = createAction<User[]>(ActionType.SET_USERS);\nexport const setPostComments = createAction<Comment[]>(\n  ActionType.SET_POST_COMMENTS,\n);\n\nconst initialState: RootState = {\n  posts: [],\n  users: [],\n  postComments: [],\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPosts, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setUsers, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n  });\n  builder.addCase(setPostComments, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.postComments = action.payload;\n  });\n});\n\nexport const store = configureStore({\n  reducer,\n});\n","import { BASE_URL, request } from './api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: number) => {\n  await request(`${BASE_URL}/posts/${postId}`, { method: 'DELETE' });\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost, getPosts } from '../../helpers/posts';\nimport { setPosts } from '../../store';\nimport {\n  getPostsByUserIdSelector, getPostsSelector,\n} from '../../store/selectors';\nimport './PostList.scss';\n\ntype Props = {\n  userId: string;\n  onPostIdHandler: (postId: number | null) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId, onPostIdHandler, selectedPostId,\n}) => {\n  const dispatch = useDispatch();\n\n  const posts = useSelector(getPostsSelector);\n  const userPostsByUserId = useSelector(getPostsByUserIdSelector(+userId));\n\n  useEffect(() => {\n    const getPostsFromServer = async () => {\n      const postsFromServer = await getPosts();\n\n      dispatch(setPosts(postsFromServer));\n    };\n\n    getPostsFromServer();\n  }, []);\n\n  useEffect(() => {\n    dispatch(setPosts(userPostsByUserId));\n  }, [userId]);\n\n  const clickHandler = (postId: number) => {\n    if (selectedPostId !== postId) {\n      onPostIdHandler(postId);\n    } else {\n      onPostIdHandler(null);\n    }\n  };\n\n  const removePost = async (postId: number) => {\n    await deletePost(postId);\n\n    const postsFromServer = await getPosts();\n\n    dispatch(setPosts(postsFromServer));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`User# ${post.userId}`}</b>\n              {post.title}\n            </div>\n            <div className=\"buttons\">\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => clickHandler(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => removePost(post.id)}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL, request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await request(`${BASE_URL}/comments?postId=${postId}`, { method: 'GET' });\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await request(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (comment: NewComment) => {\n  await request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { addComment } from '../../helpers/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  onCommentsHandler: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, onCommentsHandler,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isError, setIsError] = useState(false);\n\n  const isFormValid = () => {\n    if (name && email && comment) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const submitHandler = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isFormValid()) {\n      const newComment = {\n        postId,\n        name,\n        email,\n        body: comment,\n      };\n\n      await addComment(newComment);\n      onCommentsHandler();\n      setIsError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n    } else {\n      setIsError(true);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      {isError && (\n        <div className=\"error\">\n          Please, fill in all fields\n        </div>\n      )}\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { deleteComment, getPostComments } from '../../helpers/comments';\nimport { getPostDetails } from '../../helpers/posts';\nimport { Post } from '../../react-app-env';\nimport './PostDetails.scss';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { setPostComments } from '../../store';\n// eslint-disable-next-line import/order\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPostCommentsSelector } from '../../store/selectors';\n\ntype Props = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const dispatch = useDispatch();\n  const comments = useSelector(getPostCommentsSelector);\n\n  const [visibleComments, setVisibleComments] = useState(true);\n  const [post, setPost] = useState<Post | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const postHandler = async () => {\n    try {\n      const postDetails = await getPostDetails(postId);\n\n      setPost(postDetails);\n      setHasLoadingError(false);\n    } catch (error) {\n      setHasLoadingError(true);\n      setPost(null);\n    }\n  };\n\n  useEffect(() => {\n    const loadCommentsFromServer = async () => {\n      const commentsFromServer = await getPostComments(postId);\n\n      dispatch(setPostComments(commentsFromServer));\n    };\n\n    loadCommentsFromServer();\n    postHandler();\n  }, [postId]);\n\n  const deleteHandler = async (commentId: number) => {\n    if (postId) {\n      await deleteComment(commentId);\n      const newComments = await getPostComments(postId);\n\n      dispatch(setPostComments(newComments));\n    }\n  };\n\n  const commentsHandler = async () => {\n    const newComments = await getPostComments(postId);\n\n    dispatch(setPostComments(newComments));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {hasLoadingError ? (\n        <p className=\"error\">An error occurred while loading the data</p>\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className={classnames('button', {\n                noshow: comments.length < 1,\n              })}\n              onClick={() => {\n                setVisibleComments(!visibleComments);\n              }}\n            >\n              {visibleComments ? 'Hide comments' : 'Show comments'}\n            </button>\n            {visibleComments && (\n              <ul className=\"PostDetails__list\">\n                {comments?.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteHandler(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              {post && (\n                <NewCommentForm\n                  postId={postId}\n                  onCommentsHandler={commentsHandler}\n                />\n              )}\n            </div>\n          </section>\n        </>\n      )}\n\n    </div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getUsersSelector } from './store/selectors';\nimport { getUsers } from './helpers/api';\nimport { setUsers } from './store';\nimport { PostsList } from './components/PostList/PostList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const users = useSelector(getUsersSelector);\n\n  const [selectedUser, setSelectedUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const postIdhandler = (postId: number | null) => {\n    if (postId) {\n      setSelectedPostId(postId);\n    } else {\n      setSelectedPostId(0);\n    }\n  };\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      dispatch(setUsers(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUser}\n            onPostIdHandler={postIdhandler}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails postId={selectedPostId} />\n          ) : (\n            <p>No selected posts</p>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}